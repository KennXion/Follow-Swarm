name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spotify_swarm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/spotify_swarm_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env.test
        echo "ENCRYPTION_KEY=test-encryption-key-32-chars-long" >> .env.test
        echo "SESSION_SECRET=test-session-secret-key" >> .env.test
        echo "SPOTIFY_CLIENT_ID=test-client-id" >> .env.test
        echo "SPOTIFY_CLIENT_SECRET=test-client-secret" >> .env.test
        echo "SPOTIFY_REDIRECT_URI=http://localhost:3001/auth/callback" >> .env.test

    - name: Run database migrations
      run: npm run migrate
      env:
        NODE_ENV: test

    - name: Run backend tests
      run: npm test
      env:
        NODE_ENV: test

    - name: Run frontend tests
      run: |
        cd client
        npm test -- --run --coverage
      env:
        NODE_ENV: test

    - name: Build frontend
      run: |
        cd client
        npm run build

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./client/coverage/lcov.info
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run ESLint (Backend)
      run: npm run lint

    - name: Run ESLint (Frontend)
      run: |
        cd client
        npm run lint

    - name: Run TypeScript check (Frontend)
      run: |
        cd client
        npm run type-check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit (Backend)
      run: npm audit --audit-level moderate

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run security audit (Frontend)
      run: |
        cd client
        npm audit --audit-level moderate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Build application
      run: |
        cd client
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: client/dist/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: client/dist/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker deploy, cloud provider CLI, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: client/dist/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, docker deploy, cloud provider CLI, etc.

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed!"
        # Add failure notification logic here
